local mply = FindMetaTable('Player')

function mply:SetupNormal()
    self:StripWeapons()
	self:SetNWBool("observerLight", false)
	self:StopIgniteSequence()
	self:SetSkin(0)
	self:SetNW2Bool("Breach:CanAttach", false)
    self:SetUsingBag("")
	self:SetUsingCloth("")
	self:SetUsingArmor("")
	self:SetUsingHelmet("")
	self:SetStamina(200)
	self:SetNWBool("Have_docs", false)
	self:Flashlight(false)
	self:SetBoosted(false)
	self:SetEnergized(false)
	self:SetForcedAnimation(false)
	self:SetMaxSlots(8)
	self:SetInDimension(false)
	self:SetNWEntity("NTF1Entity", NULL)
	self:SetNWAngle("ViewAngles", Angle(0, 0, 0))
    self:UnSpectate()
    self:SetMoveType(MOVETYPE_WALK)
    self:SetViewEntity()
    self:SetNoDraw(false)
    self:SetNoTarget(false)
    self:SetNotSolid(false)
    self:StopSprinting()
    self:StopWalking()
    self:Extinguish()
    self:RemoveAllDecals()
    self:GodDisable()
    self:ResetSequenceInfo()
    self:StopZooming()
    self:RemoveSuit()
	self:GodDisable()
	self:SetNoDraw(false)
	self:SetNoTarget(false)
	self:RemoveAllAmmo()
	self:SetSpecialMax(0)
	self:SetNWString("AbilityName", "")
    self:SendLua("if BREACH.Abilities and IsValid(BREACH.Abilities.HumanSpecialButt) then BREACH.Abilities.HumanSpecialButt:Remove() end if BREACH.Abilities and IsValid(BREACH.Abilities.HumanSpecial) then BREACH.Abilities.HumanSpecial:Remove() end")

    for _, v in pairs(self:LookupBonemerges()) do
		v:Remove()
	end

    for i = 0, self:GetNumBodyGroups() - 1 do
        self:SetBodygroup(i, 0)
    end

    for i = 0, #self:GetMaterials() - 1 do
        self:SetSubMaterial(i, 0)
    end

    if timer.Exists("decease" .. self:SteamID64()) then
		timer.Remove("decease" .. self:SteamID64())
	end

	self.used1025 = false
	self.ntfsposobka = CurTime() + 1
	self.kills = 0
	self.teamkills = 0
	self.TempValues = {}
	self.HeadResist = nil
	self.ChestResist = nil
	self.GearResist = nil
	self.StomachResist = nil
	self.RightLegResist = nil
	self.LeftLegResist = nil
	self.RightArmResist = nil
	self.LeftArmResist = nil
	self.Infected409 = nil
	self.ScaleDamage = {}
	self.weaponfromclient = nil
	self.IsZombie = false
	self.recoilmultiplier = nil
	self.BaseStats = nil
	self.UsingArmor = nil
	self.handsmodel = nil
	self.canblink = true
	self.noragdoll = false
    self.AbilityTAB = nil
	self.scp1471stacks = 1

    self:Spawn()
end

function UIUSpy_MakeDocuments(totaldocs)
    local priority = {}
    local plytable = {}

    local priorityroles = {
        ["Head of Facility"] = true,
        ["MTF Security"] = true,
        ["Head of Security"] = true,
        ["Head of Personnel"] = true,
        ["Ethics Comitee"] = true,
		["Security Chief"] = true
    }

    for _, ply in ipairs(player.GetAll()) do
        local role = ply:GetRoleName()
        
        if ply:GTeam() != TEAM_SCP and ply:GTeam() != TEAM_SPEC and role != "UIU Spy" and ply:GTeam() != TEAM_CLASSD and ply:Alive() then
            if priorityroles[role] then
                table.insert(priority, ply)
            else
                table.insert(plytable, ply)
            end
        end
    end

    local function ShowNotify(ply)
        ply:Give("item_special_document")
        ply:AresNotify("Вы являетесь важным сотрудником фонда! У при себе важные документы Фонда которые содержут в себе данные об многих исследованиях в Зоне-19 а также о самой Зоне-19, вы обязаны доставить их в целостности и не умереть.")
        ply:SetNWBool("Have_docs", true)
    end

    local function GiveDocuments(players, num)
        for i = 1, num do
            if #players == 0 then 
                break
            end

            local index = math.random(1, #players)
            local target = players[index]

            ShowNotify(target)
            table.remove(players, index)
        end
    end

    local docs = math.min(#priority, totaldocs)
    GiveDocuments(priority, docs)

    local remainingdocs = totaldocs - docs
    if remainingdocs > 0 then
        GiveDocuments(plytable, remainingdocs)
    end
end

function mply:SetupCISpy()
    local rand = math.random(1, 3)
    if rand == 1 then
        self:SetBodygroup(3, 7)
        self:SetBodygroup(4, 1)
        self:StripWeapons()
        Bonemerge(BREACH_ROLES.SECURITY.security.roles[1].headgear, self)
        for k, v in pairs(BREACH_ROLES.SECURITY.security.roles[1].weapons) do
            self:Give(v)
            self:Give("breach_keycard_security_1")
            self:Give("item_tazer")
            self:StripAmmo()
            self:GetWeapon("item_tazer"):SetClip1(20)
        end
    elseif rand == 2 then
        for k, v in pairs(self:LookupBonemerges()) do
            v:Remove()
        end
        self:SetBodygroup(3, 4)
        self:SetBodygroup(5, 2)
        Bonemerge(BREACH_ROLES.SECURITY.security.roles[3].head, self)
        Bonemerge(BREACH_ROLES.SECURITY.security.roles[3].headgear, self)
        self:StripWeapons()
        for k, v in pairs(BREACH_ROLES.SECURITY.security.roles[3].weapons) do
            self:Give(v)
            self:Give("breach_keycard_security_2")
            self:Give("item_tazer")
            self:StripAmmo()
            self:GetWeapon("item_tazer"):SetClip1(20)
        end
    else
        for k, v in pairs(self:LookupBonemerges()) do
            v:Remove()
        end
        self:SetBodygroup(3, 5)
        self:SetBodygroup(5, 1)
        Bonemerge(BREACH_ROLES.SECURITY.security.roles[7].head, self)
        Bonemerge(BREACH_ROLES.SECURITY.security.roles[7].headgear, self)
        self:StripWeapons()
        for k, v in pairs(BREACH_ROLES.SECURITY.security.roles[7].weapons) do
            self:Give(v)
            self:Give("item_tazer")
            self:Give("breach_keycard_security_2")
            self:StripAmmo()
            self:GetWeapon("item_tazer"):SetClip1(20)
		end
	end
end

function SetupRadio(ply,gteam,role)
	timer.Simple(0.1,function()
		net.Start("SetFrequency")
            net.WriteEntity(ply:GetWeapon("item_radio"))
            net.WriteFloat(Radio_GetChannel(gteam,role))
		net.Send(ply)
		ply:GetWeapon("item_radio").Channel = Radio_GetChannel(gteam,role)
	end)
end

local shittyenum = {
	["HITGROUP_HEAD"] = HITGROUP_HEAD,
	["HITGROUP_CHEST"] = HITGROUP_CHEST,
	["HITGROUP_LEFTARM"] = HITGROUP_LEFTARM,
	["HITGROUP_RIGHTARM"] = HITGROUP_RIGHTARM,
	["HITGROUP_STOMACH"] = HITGROUP_STOMACH,
	["HITGROUP_GEAR"] = HITGROUP_GEAR,
	["HITGROUP_LEFTLEG"] = HITGROUP_LEFTLEG,
	["HITGROUP_RIGHTLEG"] = HITGROUP_RIGHTLEG
}

function mply:ApplyRoleStats(role)
	BroadcastStopMusic(self)

	self:SendLua("HideEQ()")
	self:SetupNormal()
	self:SetRoleName( role.name )
	self:SetGTeam( role.team )

	local isblack = math.random(1,5) == 1

	if role.white == true then isblack = false end

	local HeadModel = istable(role["head"]) and table.Random(role["head"]) or role["head"]

	if role.models and role.fmodels then
		local selfmodel

		if math.random(0, 1) == 0 then
			selfmodel = role.fmodels
		else
			selfmodel = role.models
		end

		local finalselfmodel = selfmodel[math.random(1, #selfmodel)]

		self:SetModel(finalselfmodel)
	else
		if role.models then
			local finalselfmodel = role.models[math.random(1, #role.models)]
			self:SetModel(finalselfmodel)
		elseif role.fmodels then
			local finalselfmodel = role.fmodels[math.random(1, #role.fmodels)]
			self:SetModel(finalselfmodel)
		end
	end

	if role.head then Bonemerge(HeadModel,self) end

	if role["usehead"] then
		if role["randomizehead"] then
			if self:GetRoleName() == "Class-D Bor" then return end
			if !self:IsFemale() then
				Bonemerge(PickHeadModel(self:SteamID64()), self)
			elseif self:IsFemale() then
				Bonemerge(PickHeadModel(self:SteamID64(), true), self)
			end
		else
			Bonemerge("models/cultist/heads/male/male_head_1.mdl", self)
		end
	end

	if role["randomizeface"] or !role["white"] then
		for k,v in pairs(self:LookupBonemerges()) do
			if CORRUPTED_HEADS[v:GetModel()] then v:SetSubMaterial(1, PickFaceSkin(isblack,self:SteamID64(),false)) end
			if v:GetModel():find("fat_heads") or v:GetModel():find("bor_heads") then continue end
			if v:GetModel():find("heads") or v:GetModel():find("balaclavas_new") then
				if !self:IsFemale() then
				v:SetSubMaterial(0, PickFaceSkin(isblack,self:SteamID64(),false))
			elseif
			  self:IsFemale() then
				v:SetSubMaterial(0, PickFaceSkin(isblack,self:SteamID64(),true))
			  end
			end
		end
	end

	local HairModel = nil
	if math.random(1, 5) > 1 then
		if isblack and !self:IsFemale() and role["blackhairm"] then
			HairModel = role["blackhairm"][math.random(1, #role["blackhairm"])]
		elseif role["hairm"] and !self:IsFemale() then
			HairModel = role["hairm"][math.random(1, #role["hairm"])]
		elseif role["hairf"] and self:IsFemale() then
			HairModel = role["hairf"][math.random(1, #role["hairf"])]
		end
	end

	if HairModel then
		if self:GetRoleName() == "Medic" and !self:IsFemale() then return end
		Bonemerge(HairModel,self)
	end

	if isblack and self:GetModel():find("class_d") then
		self:SetSkin(1)
	end

	if isblack and self:GetRoleName() == "Class-D Bor" then
		for k,v in pairs(self:LookupBonemerges()) do
			if v:GetModel():find("bor_heads") then
				v:SetSkin(1)
			end
		end
	end

	if role.skin then
		self:SetSkin(role.skin)
	elseif !isblack then
		self:SetSkin(0)
	end

	for i = 0, self:GetNumBodyGroups() do
		self:SetBodygroup( i, 0 )
	end

	if role.headgear then Bonemerge(role.headgear, self) end
	if role.hackerhat then Bonemerge(role.hackerhat, self) end
	if role.bodygroups then for k,v in pairs(role.bodygroups) do self:SetBodyGroups(v) end end

	for i = 0, 9 do
        local bodygroupKey = "bodygroup" .. i
        if role[bodygroupKey] then
            self:SetBodygroup(i, role[bodygroupKey])
        end
    end

	if role.cispy then
		self:SetupCISpy()
	end

    if role.weapons and role.weapons != "" then
        for _, weapon in ipairs(role.weapons) do
            self:Give(weapon)

			if weapon == "item_radio" then
				SetupRadio(self,self:GTeam(),self:GetRoleName())
			end

			if weapon == "item_tazer" then
				self:GetWeapon("item_tazer"):SetClip1(20)
			end
        end
    end

	if role.keycard and role.keycard != "" then 
		self:Give("breach_keycard_"..role.keycard)
	end

    self:StripAmmo()

    if role.ammo and role.ammo != "" then
        for _, ammo in pairs(role.ammo) do
            self:GiveAmmo(ammo[2], self:GetWeapon(ammo[1]):GetPrimaryAmmoType(), true)
        end
    end

	self:Namesurvivor()

	if role.damage_modifiers then
		for hitgroup, modifier in pairs(role.damage_modifiers) do
			local enumval = shittyenum[hitgroup]
			if enumval then
				self.ScaleDamage[enumval] = modifier
			end
		end
	end

	if role.ability then
		net.Start("SpecialSCIHUD")
			net.WriteString(role["ability"][1])
			net.WriteUInt(role["ability"][2], 9)
			net.WriteString(role["ability"][3])
			net.WriteString(role["ability"][4])
			net.WriteBool(role["ability"][5])
		net.Send(self)

		self:SetNWString("AbilityName", (role["ability"][1]))
		self:SetSpecialCD(0)

		self.AbilityTAB = {
			[1] = role["ability"][1],
			[2] = role["ability"][2],
			[3] = role["ability"][3],
			[4] = role["ability"][4],
			[5] = role["ability"][5]
		}
	end

    if role.ability_max then
		self:SetSpecialMax( role["ability_max"] )
    end

	self:SetHealth(role.health)
	self:SetMaxHealth(role.health)

	local defaultwalkspeed = 90
	local defaultrunspeed = 183

	if role.walkspeed then
		self:SetWalkSpeed(defaultwalkspeed + role.walkspeed / 3)
	else
		self:SetWalkSpeed(91)
	end

	if role.runspeed then
		self:SetRunSpeed(defaultrunspeed + role.runspeed / 3)
	else
		self:SetRunSpeed(defaultrunspeed)
	end

	self:SetSlowWalkSpeed( self:GetWalkSpeed() - 40 )
	self:SetLadderClimbSpeed(140)

	if self:GetRoleName() == "Class-D Fast" then
		self:SetRunSpeed(231)
	end

	if role.jumppower then
		self:SetJumpPower(190 * (role.jumppower or 1))
    else
  		self:SetJumpPower(190)
	end

	if role.stamina then 
		self:SetStaminaScale(role.stamina)
	end

	if role.maxslots then 
		self:SetMaxSlots(role.maxslots) 
	end

	if self:GTeam() == TEAM_CLASSD and self:IsPremium() then
        self:SetBodygroup(0, math.random(0, 4))
    end
		
	net.Start("RolesSelected")
	net.Send(self)

	self:SetupHands()

	if self:GetRoleName() == "UIU Spy" and timer.Exists("RoundTime") then
		UIUSpy_MakeDocuments(3)
	end

	if role.recoilmultiplier then
		self.recoilmultiplier = role.recoilmult
	end

	self.voicePitch = math.random(90, 110)
end